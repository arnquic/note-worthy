//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::ClientStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "client")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: Uuid,
    pub date_of_birth: Date,
    pub email: String,
    pub first_name: String,
    pub last_name: String,
    pub password: String,
    pub phone: String,
    pub preferred_name: Option<String>,
    pub pronouns: String,
    pub client_status: ClientStatus,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::client_therapist::Entity")]
    ClientTherapist,
}

impl Related<super::client_therapist::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ClientTherapist.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
